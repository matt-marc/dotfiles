set -o vi

alias vim="nvim"
alias oldvim="\vim"

alias editvim="vim ~/.config/nvim/init.vim"
alias editoldvim="vim ~/.vimrc"


# bash alias for configuration of profile
alias src='source ~/.bashrc' # src to quickly resource bash env
alias conf="vim ~/.bash_marchi"


alias cc='clear'
alias ll='ls -la'

alias gmsh='/opt/gmsh-4.5.2-Linux64/bin/gmsh'

# remove all BLAWB test
alias dis-test="sed -i 's/BLAWB_TEST\(.*\)ON$/BLAWB_TEST\1OFF/' CMakeCache.txt"
alias en-test="sed -i 's/BLAWB_TEST\(.*\)OFF$/BLAWB_TEST\1ON/' CMakeCache.txt"

# project shortcuts
alias goval='ssh valhalla'
alias goblawb='cd ~/BLawB/src/'
alias gobuild='cd ~/BLawB/build/'
alias gojcp='cd ~/JCP_mathieu_2020/src/'
alias gopaper='cd ~/JCP_mathieu_2020/paper/'
alias gothesis='cd ~/JCP_mathieu_2020/paper/thesis/'
alias gonotes='cd ~/JCP_mathieu_2020/notes/'
alias golucian='cd /home/obelix/hdd/group_code/lucian'
alias goresults='cd /home/obelix/pgm_results/cooley'
alias goparaview='cd /home/obelix/hdd/temp_software/ParaView-5.8.0-MPI-Linux-Python3.7-64bit/bin'

# jump around
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Function to parse current git branch
#
git_prompt() {
    local branch=$(parse_git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        echo -e "(${branch}$(git_status))"
    fi

}
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2> /dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    [[ -n $(git log --branches --not --remotes 2> /dev/null) ]] && output="${output}P"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

# Sets the max depth shown for directories to 2
PROMPT_DIRTRIM=2

# configures termnal output to look nicer and show parsed git branch
export PS1="\[\033[38;5;200m\]\u \[\033[38;5;46m\][\w]\[\033[38;5;11m\] \$(git_prompt) \[\033[00m\] $ "


# rm function for files
rm_check() {
    echo "FILES TO BE DELETED"
    echo
    ls *.dat *.vtk *.vts *.vtm *.csv 2>/dev/null
    read -p "are you sure you want to delete the files? Y/N " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]];  then
        find -name '*.dat' -print -delete
        find -name '*.csv' -print -delete
        find -name '*.vtk' -print -delete
        find -name '*.vts' -print -delete
        find -name '*.vtm' -print -delete
        echo "all those files have been deleted............."
    fi
}

mk_ffmpeg(){
    NAME="$1"
    ffmpeg -r 60 -s 1920x1080 -i $NAME.%04d.png -vcodec libx264 -crf 25  -pix_fmt yuv420p $NAME.mp4
}

alias mkffmpeg='mk_ffmpeg'

module load mpi/openmpi-x86_64

alias rmdata='rm_check'
alias mkmovie='mk_ffmpeg'

if [ -f ~/.fzf.bash ]; then
    export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
fi
